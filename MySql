##Create a Database:

create database employee_ng;

##Use database:

use employee_ng;

##Create a Table:

CREATE TABLE Employee_Info (
    ->     EmployeeID INT(10),
    ->     EmployeeName VARCHAR(255),
    ->     EmergencyContactName VARCHAR(255),
    ->     PhoneNumber INT,
    ->     Address VARCHAR(255),
    ->     City VARCHAR(255),
    ->     Country VARCHAR(255)
    -> );

##Inserting Data:

INSERT INTO Employee_Info (EmployeeID, EmployeeName, EmergencyContactName, PhoneNumber, Address, City, Country)
    -> VALUES
    -> (1, 'John Doe', 'Jane Doe', 1234567890, '123 Main St', 'New York', 'USA'),
    -> (2, 'Alice Smith', 'Bob Smith', 9876543210, '456 Elm St', 'Los Angeles', 'USA'),
    -> (3, 'Emily Johnson', 'Michael Johnson', 5555555555, '789 Oak St', 'Chicago', 'USA'),
    -> (4, 'David Brown', 'Karen Brown', 1111111111, '321 Pine St', 'Houston', 'USA'),
    -> (5, 'Sarah Wilson', 'Andrew Wilson', 9999999999, '654 Maple St', 'Seattle', 'USA'),
    -> (6, 'Daniel Lee', 'Jessica Lee', 2222222222, '987 Cedar St', 'San Francisco', 'USA'),
    -> (7, 'Jennifer Davis', 'Richard Davis', 8888888888, '741 Birch St', 'Boston', 'USA'),
    -> (8, 'Matthew Anderson', 'Olivia Anderson', 3333333333, '852 Walnut St', 'Miami', 'USA'),
    -> (9, 'Sophia Taylor', 'William Taylor', 7777777777, '369 Pineapple St', 'Dallas', 'USA'),
    -> (10, 'Oliver Moore', 'Ava Moore', 4444444444, '963 Cherry St', 'Phoenix', 'USA');

##Retrieve data from a table:

select * from Employee_Info;
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
| EmployeeID | EmployeeName     | EmergencyContactName | PhoneNumber | Address          | City          | Country |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
|          1 | John Doe         | Jane Doe             |  1234567890 | 123 Main St      | New York      | USA     |
|          2 | Alice Smith      | Bob Smith            |  9876543210 | 456 Elm St       | Los Angeles   | USA     |
|          3 | Emily Johnson    | Michael Johnson      |  5555555555 | 789 Oak St       | Chicago       | USA     |
|          4 | David Brown      | Karen Brown          |  1111111111 | 321 Pine St      | Houston       | USA     |
|          5 | Sarah Wilson     | Andrew Wilson        |  9999999999 | 654 Maple St     | Seattle       | USA     |
|          6 | Daniel Lee       | Jessica Lee          |  2222222222 | 987 Cedar St     | San Francisco | USA     |
|          7 | Jennifer Davis   | Richard Davis        |  8888888888 | 741 Birch St     | Boston        | USA     |
|          8 | Matthew Anderson | Olivia Anderson      |  3333333333 | 852 Walnut St    | Miami         | USA     |
|          9 | Sophia Taylor    | William Taylor       |  7777777777 | 369 Pineapple St | Dallas        | USA     |
|         10 | Oliver Moore     | Ava Moore            |  4444444444 | 963 Cherry St    | Phoenix       | USA     |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+

select * from Employee_Info where City = 'Boston';
+------------+----------------+----------------------+-------------+--------------+--------+---------+
| EmployeeID | EmployeeName   | EmergencyContactName | PhoneNumber | Address      | City   | Country |
+------------+----------------+----------------------+-------------+--------------+--------+---------+
|          2 | Alice Smith    | Bob Smith            |  9876543210 | 456 Elm St   | Boston | USA     |
|          7 | Jennifer Davis | Richard Davis        |  8888888888 | 741 Birch St | Boston | USA     |
+------------+----------------+----------------------+-------------+--------------+--------+---------+


##Update data in a table:

update Employee_Info set City = 'Boston' where EmployeeID = 2;

select * from Employee_Info;
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
| EmployeeID | EmployeeName     | EmergencyContactName | PhoneNumber | Address          | City          | Country |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
|          1 | John Doe         | Jane Doe             |  1234567890 | 123 Main St      | New York      | USA     |
|          2 | Alice Smith      | Bob Smith            |  9876543210 | 456 Elm St       | Boston        | USA     |
|          3 | Emily Johnson    | Michael Johnson      |  5555555555 | 789 Oak St       | Chicago       | USA     |
|          4 | David Brown      | Karen Brown          |  1111111111 | 321 Pine St      | Houston       | USA     |
|          5 | Sarah Wilson     | Andrew Wilson        |  9999999999 | 654 Maple St     | Seattle       | USA     |
|          6 | Daniel Lee       | Jessica Lee          |  2222222222 | 987 Cedar St     | San Francisco | USA     |
|          7 | Jennifer Davis   | Richard Davis        |  8888888888 | 741 Birch St     | Boston        | USA     |
|          8 | Matthew Anderson | Olivia Anderson      |  3333333333 | 852 Walnut St    | Miami         | USA     |
|          9 | Sophia Taylor    | William Taylor       |  7777777777 | 369 Pineapple St | Dallas        | USA     |
|         10 | Oliver Moore     | Ava Moore            |  4444444444 | 963 Cherry St    | Phoenix       | USA     |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+

##Delete data from a table:

delete from Employee_Info where EmployeeID = 4;

select * from Employee_Info;
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
| EmployeeID | EmployeeName     | EmergencyContactName | PhoneNumber | Address          | City          | Country |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+
|          1 | John Doe         | Jane Doe             |  1234567890 | 123 Main St      | New York      | USA     |
|          2 | Alice Smith      | Bob Smith            |  9876543210 | 456 Elm St       | Boston        | USA     |
|          3 | Emily Johnson    | Michael Johnson      |  5555555555 | 789 Oak St       | Chicago       | USA     |
|          5 | Sarah Wilson     | Andrew Wilson        |  9999999999 | 654 Maple St     | Seattle       | USA     |
|          6 | Daniel Lee       | Jessica Lee          |  2222222222 | 987 Cedar St     | San Francisco | USA     |
|          7 | Jennifer Davis   | Richard Davis        |  8888888888 | 741 Birch St     | Boston        | USA     |
|          8 | Matthew Anderson | Olivia Anderson      |  3333333333 | 852 Walnut St    | Miami         | USA     |
|          9 | Sophia Taylor    | William Taylor       |  7777777777 | 369 Pineapple St | Dallas        | USA     |
|         10 | Oliver Moore     | Ava Moore            |  4444444444 | 963 Cherry St    | Phoenix       | USA     |
+------------+------------------+----------------------+-------------+------------------+---------------+---------+


************ LEETCODE PRACTICED QUESTIONS ************

************ SELECT ***********

#1
select product_id from Products
where low_fats = 'Y' and recyclable = 'Y'

#2
select name from Customer
where referee_id != 2 or referee_id is null

#3
select name, population, area from World
where area >= 3000000 or population >= 25000000

#4
select distinct author_id as id from Views
where author_id = viewer_id
order by id asc

#5
select tweet_id from Tweets
where length (content) > 15


************* Basic Joins **************

#3
SELECT v.customer_id , COUNT(v.visit_id) AS count_no_trans 
FROM Visits v
LEFT JOIN Transactions t
ON v.visit_id = t.visit_id
where t.transaction_id is NULL
group by v.customer_id

#4
select w1.id from weather w1 join weather w2 on datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature > w2.temperature

#6
select e.name,b.bonus from Employee e left  join Bonus b on e.empId = b.empId where b.bonus < 1000 or b.bonus is null;

#8
select name from Employee where id in (select managerId from Employee group by managerId having count(managerId )>=5);

#9
SELECT s.user_id, round(AVG(CASE WHEN c.action = 'CONFIRMED' THEN 1 ELSE 0 END),2) AS confirmation_rate
FROM Signups s LEFT JOIN confirmations c ON s.user_id = c.user_id GROUP BY s.user_id;


************* Basic Aggregate Functions **********
#1
select * from Cinema
where id %2 <> 0 and description != "boring"
order by rating desc

#2
select p.product_id, ROUND(SUM(p.price * u.units) / sum(u.units), 2) as average_price from Prices p
join UnitsSold u on p.product_id = u.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date
group by p.product_id

#3


************* SORTING ***************

#5
select user_id , count(follower_id) as followers_count from Followers group by user_id order by user_id asc;

#6
with cte as (select num , count(num) as counts from mynumbers group by num ),temptable as(

select num , counts from cte where counts = 1)

select max(num) as num from temptable;


************ Sub queries **************

#1
select employee_id from employees where salary < 30000 and manager_id not in (select employee_id from employees ) order by employee_id;

#2
(
    select u.name  as results from Users u JOIN MovieRating r on u.user_id = r.user_id  group by r.user_id order by count(r.user_id) desc,u.name limit 1) union all
 (
    select m.title as results  from movies m join MovieRating r on m.movie_id = r.movie_id where Month(created_at) = 02 and Year(created_at) = 2020 group by r.movie_id order by avg(r.rating) desc ,m.title limit 1)


#3
# with cte as (
# select customer_id,name,visited_on, sum(amount) as amount from customer group by visited_on),
# cte1 as (
# select *, lead(visited_on,6) over(order by visited_on) as timediffs   from cte )

# select * from cte1;
with cte as (
select visited_on , min(visited_on) over() as min_visited, sum(amount) as amount1 from customer group by visited_on ),
cte2 as(
  select visited_on,min_visited,sum(amount1) over(rows between 6 preceding and  current row) as  amount,
  round(avg(amount1) over(rows between 6  preceding and current row),2) as average_amount from cte 
)
select visited_on,amount,average_amount from cte2 where datediff(visited_on,min_visited) >=6;


